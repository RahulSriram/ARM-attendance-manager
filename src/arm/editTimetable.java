/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package arm;

import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
/**
 *
 * @author rahul
 */
public class editTimetable extends javax.swing.JFrame {

	/**
	 * Creates new form editTimetable
	 */
	public editTimetable(String name) {
		classname=name;
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        backbutton = new javax.swing.JButton();
        title = new javax.swing.JLabel();
        leftdaylabel = new javax.swing.JLabel();
        leftdaychooser = new javax.swing.JComboBox();
        sessionlabel = new javax.swing.JLabel();
        sessionchooser = new javax.swing.JComboBox();
        leftsessionnamelabel = new javax.swing.JLabel();
        leftsessionname = new javax.swing.JTextField();
        leftstartlabel = new javax.swing.JLabel();
        leftstarthourchooser = new javax.swing.JComboBox();
        leftstartseparator = new javax.swing.JLabel();
        leftstartminutechooser = new javax.swing.JComboBox();
        leftendlabel = new javax.swing.JLabel();
        leftendhourchooser = new javax.swing.JComboBox();
        leftendseparator = new javax.swing.JLabel();
        leftendminutechooser = new javax.swing.JComboBox();
        notifier = new javax.swing.JLabel();
        orlabel = new javax.swing.JLabel();
        righttitle = new javax.swing.JLabel();
        rightdaylabel = new javax.swing.JLabel();
        rightdaychooser = new javax.swing.JComboBox();
        rightsessionnamelabel = new javax.swing.JLabel();
        rightsessionname = new javax.swing.JTextField();
        rightstartlabel = new javax.swing.JLabel();
        rightstarthourchooser = new javax.swing.JComboBox();
        rightstartseparator = new javax.swing.JLabel();
        rightstartminutechooser = new javax.swing.JComboBox();
        rightendlabel = new javax.swing.JLabel();
        rightendhourchooser = new javax.swing.JComboBox();
        rightendseparator = new javax.swing.JLabel();
        rightendminutechooser = new javax.swing.JComboBox();
        applybutton = new javax.swing.JButton();
        deletebutton = new javax.swing.JButton();
        addbutton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        backbutton.setFont(new java.awt.Font("Cantarell", 1, 18)); // NOI18N
        backbutton.setText("<");
        backbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbuttonActionPerformed(evt);
            }
        });

        title.setFont(new java.awt.Font("Cantarell", 0, 36)); // NOI18N
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("Edit Timetable");

        leftdaylabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        leftdaylabel.setText("Choose Day:");

		String[] daystring=util.SQLQuery(classname,"SELECT DISTINCT Day FROM Timetable");
		if(daystring!=null)
        	leftdaychooser.setModel(new javax.swing.DefaultComboBoxModel(daystring));
        leftdaychooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftdaychooserActionPerformed(evt);
            }
        });

        sessionlabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        sessionlabel.setText("Choose Session:");

		daystring=util.SQLQuery(classname,"SELECT SessionName FROM Timetable WHERE Day='"+leftdaychooser.getSelectedItem().toString()+"'");
        sessionchooser.setModel(new javax.swing.DefaultComboBoxModel(daystring));
        sessionchooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sessionchooserActionPerformed(evt);
            }
        });

        leftsessionnamelabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        leftsessionnamelabel.setText("Session Name:");
        
        leftsessionname.setText(sessionchooser.getSelectedItem().toString());

		String[] temp=(util.SQLQuery(classname,"SELECT TimeStart FROM Timetable WHERE Day='"+leftdaychooser.getSelectedItem().toString()+"' AND Session="+(sessionchooser.getSelectedIndex()+1))[0]).split(":");

        leftstartlabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        leftstartlabel.setText("Start Time:");

        leftstarthourchooser.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));
        leftstarthourchooser.setSelectedIndex(Integer.parseInt(temp[0]));

        leftstartseparator.setFont(new java.awt.Font("Cantarell", 1, 24)); // NOI18N
        leftstartseparator.setText(":");

        leftstartminutechooser.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));
        leftstartminutechooser.setSelectedIndex(Integer.parseInt(temp[1]));

		temp=(util.SQLQuery(classname,"SELECT TimeEnd FROM Timetable WHERE Day='"+leftdaychooser.getSelectedItem().toString()+"' AND Session="+(sessionchooser.getSelectedIndex()+1))[0]).split(":");

        leftendlabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        leftendlabel.setText("End Time:");

        leftendhourchooser.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));
        leftendhourchooser.setSelectedIndex(Integer.parseInt(temp[0]));

        leftendseparator.setFont(new java.awt.Font("Cantarell", 1, 24)); // NOI18N
        leftendseparator.setText(":");

        leftendminutechooser.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));
        leftendminutechooser.setSelectedIndex(Integer.parseInt(temp[1]));

        orlabel.setFont(new java.awt.Font("Cantarell", 0, 30)); // NOI18N
        orlabel.setText("OR");

        righttitle.setFont(new java.awt.Font("Cantarell", 0, 30)); // NOI18N
        righttitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        righttitle.setText("Add a new Session");

        rightdaylabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        rightdaylabel.setText("Choose Day:");

        rightdaychooser.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" }));

        rightsessionnamelabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        rightsessionnamelabel.setText("Session Name:");

        rightstartlabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        rightstartlabel.setText("Start Time:");

        rightstarthourchooser.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));

        rightstartseparator.setFont(new java.awt.Font("Cantarell", 1, 24)); // NOI18N
        rightstartseparator.setText(":");

        rightstartminutechooser.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));

        rightendlabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        rightendlabel.setText("End Time:");

        rightendhourchooser.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));

        rightendseparator.setFont(new java.awt.Font("Cantarell", 1, 24)); // NOI18N
        rightendseparator.setText(":");

        rightendminutechooser.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));

        notifier.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        applybutton.setText("Apply");
        applybutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applybuttonActionPerformed(evt);
            }
        });

        deletebutton.setText("Delete");
        deletebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletebuttonActionPerformed(evt);
            }
        });

        addbutton.setText("Add");
        addbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addbuttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(backbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(leftstartlabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(leftsessionnamelabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(sessionlabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(leftendlabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addGap(18, 18, Short.MAX_VALUE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                            .addGroup(layout.createSequentialGroup()
                                                                .addComponent(leftstarthourchooser, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(leftstartseparator)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(leftstartminutechooser, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(sessionchooser, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(leftsessionname, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                        .addGap(18, 18, 18)
                                                        .addComponent(orlabel))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(leftendhourchooser, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(leftendseparator)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(leftendminutechooser, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(leftdaylabel, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(leftdaychooser, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(rightdaylabel, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(rightdaychooser, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(rightstartlabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(rightsessionnamelabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(rightendlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(rightendhourchooser, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(rightendseparator)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(rightendminutechooser, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addComponent(rightstarthourchooser, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addComponent(rightstartseparator)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addComponent(rightstartminutechooser, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(rightsessionname, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                            .addComponent(righttitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addComponent(notifier, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(31, 31, 31)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(applybutton, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(deletebutton, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(141, 141, 141))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                    .addComponent(backbutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(leftdaychooser)
                            .addComponent(leftdaylabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(sessionchooser)
                            .addComponent(sessionlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(leftsessionname)
                            .addComponent(leftsessionnamelabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(leftstartlabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(leftstartseparator)
                                .addComponent(leftstarthourchooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(leftstartminutechooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(leftendseparator)
                            .addComponent(leftendhourchooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(leftendminutechooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(leftendlabel)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(righttitle, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rightdaychooser, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rightdaylabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(rightsessionname)
                            .addComponent(rightsessionnamelabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(orlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rightstartseparator)
                            .addComponent(rightstarthourchooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rightstartminutechooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rightstartlabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rightendseparator)
                            .addComponent(rightendhourchooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rightendminutechooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rightendlabel))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(notifier, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deletebutton, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(applybutton, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

private void leftdaychooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftdaychooserActionPerformed
        sessionchooser.setModel(new javax.swing.DefaultComboBoxModel(util.SQLQuery(classname,"SELECT SessionName FROM Timetable WHERE Day='"+leftdaychooser.getSelectedItem().toString()+"'")));
        leftsessionname.setText(sessionchooser.getSelectedItem().toString());
        String[] temp=(util.SQLQuery(classname,"SELECT TimeStart FROM Timetable WHERE Day='"+leftdaychooser.getSelectedItem().toString()+"' AND Session="+(sessionchooser.getSelectedIndex()+1))[0]).split(":");
        leftstarthourchooser.setSelectedIndex(Integer.parseInt(temp[0]));
        leftstartminutechooser.setSelectedIndex(Integer.parseInt(temp[1]));
        temp=(util.SQLQuery(classname,"SELECT TimeEnd FROM Timetable WHERE Day='"+leftdaychooser.getSelectedItem().toString()+"' AND Session="+(sessionchooser.getSelectedIndex()+1))[0]).split(":");
        leftendhourchooser.setSelectedIndex(Integer.parseInt(temp[0]));
        leftendminutechooser.setSelectedIndex(Integer.parseInt(temp[1]));
    }//GEN-LAST:event_leftdaychooserActionPerformed

    private void sessionchooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sessionchooserActionPerformed
        leftsessionname.setText(sessionchooser.getSelectedItem().toString());
        String[] temp=(util.SQLQuery(classname,"SELECT TimeStart FROM Timetable WHERE Day='"+leftdaychooser.getSelectedItem().toString()+"' AND Session="+(sessionchooser.getSelectedIndex()+1))[0]).split(":");
        leftstarthourchooser.setSelectedIndex(Integer.parseInt(temp[0]));
        leftstartminutechooser.setSelectedIndex(Integer.parseInt(temp[1]));
        temp=(util.SQLQuery(classname,"SELECT TimeEnd FROM Timetable WHERE Day='"+leftdaychooser.getSelectedItem().toString()+"' AND Session="+(sessionchooser.getSelectedIndex()+1))[0]).split(":");
        leftendhourchooser.setSelectedIndex(Integer.parseInt(temp[0]));
        leftendminutechooser.setSelectedIndex(Integer.parseInt(temp[1]));
    }//GEN-LAST:event_sessionchooserActionPerformed

    private void applybuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applybuttonActionPerformed
        int currentsession=sessionchooser.getSelectedIndex()+1;
        String currentname=sessionchooser.getSelectedItem().toString();
        String dayip=leftdaychooser.getSelectedItem().toString();
        String nameip=leftsessionname.getText();
        String startip=leftstarthourchooser.getSelectedItem().toString()+":"+leftstartminutechooser.getSelectedItem().toString();
        String endip=leftendhourchooser.getSelectedItem().toString()+":"+leftendminutechooser.getSelectedItem().toString();
        List<String> day=new ArrayList(Arrays.asList(util.SQLQuery(classname,"SELECT Day FROM Timetable")));
        List<String> sessionname=new ArrayList(Arrays.asList(util.SQLQuery(classname,"SELECT SessionName FROM Timetable")));
        List<String> starttime=new ArrayList(Arrays.asList(util.SQLQuery(classname,"SELECT TimeStart FROM Timetable")));
        List<String> endtime=new ArrayList(Arrays.asList(util.SQLQuery(classname,"SELECT TimeEnd FROM Timetable")));
        String currentstart=util.SQLQuery(classname,"SELECT TimeStart FROM Timetable WHERE Session="+currentsession+" AND Day='"+dayip+"'")[0];
        String currentend=util.SQLQuery(classname,"SELECT TimeEnd FROM Timetable WHERE Session="+currentsession+" AND Day='"+dayip+"'")[0];
        boolean dayused=false,timeused=false;

        if(sessionname.isEmpty())
        {
            notifier.setForeground(new java.awt.Color(255, 0, 0));
            notifier.setText("No sessions available");
        }
        
        else if(startip.compareTo(endip)>0)
        {
        	notifier.setForeground(new java.awt.Color(255, 0, 0));
        	notifier.setText("End time cannot be before Start time");
		}

        else
        {
            for(int i=0;i<sessionname.size();i++)
            {
                if(dayip.equals(day.get(i)))
                {
                    dayused=true;

					if((!currentstart.equals(starttime.get(i)))&&(!currentend.equals(endtime.get(i))))
                    {
                    	if(startip.equals(starttime.get(i))||startip.equals(endtime.get(i)))
                    	{
                    	    timeused=true;
                    	    break;
                    	}

	                    if(endip.equals(starttime.get(i))||endip.equals(endtime.get(i)))
	                    {
	                        timeused=true;
	                        break;
	                    }

   		                if(startip.compareTo(starttime.get(i))<0)
        	            if(endip.compareTo(endtime.get(i))>0)
        	            {
        	                timeused=true;
        	                break;
        	            }

	                    if(startip.compareTo(starttime.get(i))>0)
    	                if(endip.compareTo(endtime.get(i))<0)
    	                {
    	                    timeused=true;
    	                    break;
    	                }

    	                if(startip.compareTo(starttime.get(i))>0)
    	                if(startip.compareTo(endtime.get(i))<0)
    	                {
    	                    timeused=true;
    	                    break;
    	                }

    	                if(endip.compareTo(starttime.get(i))>0)
      		            if(endip.compareTo(endtime.get(i))<0)
            	        {
            	            timeused=true;
            	            break;
            	        }
            		}
                }
            }

            if((!dayused)||(!timeused))
            {
                util.updatePercentage(classname,nameip);
                util.removePercentage(classname,currentname);
                util.updateWorkingHours("StartTime",startip);
                util.updateWorkingHours("EndTime",endip);
                util.SQLUpdate(classname,"UPDATE Timetable SET SessionName='"+nameip+"',TimeStart='"+startip+"',TimeEnd='"+endip+"' WHERE Day='"+dayip+"' AND Session="+currentsession);
                notifier.setForeground(new java.awt.Color(0, 0, 255));
                notifier.setText("Successfully updated session '"+nameip+"'");
            }

            else
            {
                notifier.setForeground(new java.awt.Color(255, 0, 0));
                notifier.setText("Session timings clash with previously entered session");
            }
        }
        
        sessionchooser.setModel(new javax.swing.DefaultComboBoxModel(util.SQLQuery(classname,"SELECT SessionName FROM Timetable WHERE Day='"+leftdaychooser.getSelectedItem().toString()+"'")));
    }//GEN-LAST:event_applybuttonActionPerformed

    private void addbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addbuttonActionPerformed
        String dayip=rightdaychooser.getSelectedItem().toString();
        String nameip=rightsessionname.getText();
        String startip=rightstarthourchooser.getSelectedItem().toString()+":"+rightstartminutechooser.getSelectedItem().toString();
        String endip=rightendhourchooser.getSelectedItem().toString()+":"+rightendminutechooser.getSelectedItem().toString();
        List<String> day=new ArrayList(Arrays.asList(util.SQLQuery(classname,"SELECT Day FROM Timetable")));
        List<String> sessionname=new ArrayList(Arrays.asList(util.SQLQuery(classname,"SELECT SessionName FROM Timetable")));
        List<String> starttime=new ArrayList(Arrays.asList(util.SQLQuery(classname,"SELECT TimeStart FROM Timetable")));
        List<String> endtime=new ArrayList(Arrays.asList(util.SQLQuery(classname,"SELECT TimeEnd FROM Timetable")));
        boolean dayused=false,timeused=false;

        if(sessionname.isEmpty())
        {
            util.updatePercentage(classname,nameip);
            util.updateWorkingHours("StartTime",startip);
            util.updateWorkingHours("EndTime",endip);
            int session=1;
            util.SQLUpdate(classname,"INSERT INTO Timetable VALUES('"+dayip+"','"+session+"','"+startip+"','"+endip+"','"+nameip+"')");
            notifier.setForeground(new java.awt.Color(0, 0, 255));
            notifier.setText("Successfully added session '"+nameip+"'");
        }

        else if(startip.compareTo(endip)>0)
        {
        	notifier.setForeground(new java.awt.Color(255, 0, 0));
        	notifier.setText("End time cannot be before Start time");
		}

        else
        {
            for(int i=0;i<sessionname.size();i++)
            {
                if(dayip.equals(day.get(i)))
                {
                    dayused=true;

                    if(startip.equals(starttime.get(i))||startip.equals(endtime.get(i)))
                    {
                        timeused=true;
                        break;
                    }

                    if(endip.equals(starttime.get(i))||endip.equals(endtime.get(i)))
                    {
                        timeused=true;
                        break;
                    }

                    if(startip.compareTo(starttime.get(i))<0)
                    if(endip.compareTo(endtime.get(i))>0)
                    {
                        timeused=true;
                        break;
                    }

                    if(startip.compareTo(starttime.get(i))>0)
                    if(endip.compareTo(endtime.get(i))<0)
                    {
                        timeused=true;
                        break;
                    }

                    if(startip.compareTo(starttime.get(i))>0)
                    if(startip.compareTo(endtime.get(i))<0)
                    {
                        timeused=true;
                        break;
                    }

                    if(endip.compareTo(starttime.get(i))>0)
                    if(endip.compareTo(endtime.get(i))<0)
                    {
                        timeused=true;
                        break;
                    }
                }
            }

            if((!dayused)||(!timeused))
            {
                util.updatePercentage(classname,nameip);
                util.updateWorkingHours("StartTime",startip);
                util.updateWorkingHours("EndTime",endip);
                String temp=util.SQLQuery(classname,"SELECT MAX(Session) FROM Timetable WHERE Day='"+dayip+"'")[0];
                if(temp==null)
                	temp="0";
                int session=Integer.parseInt(temp)+1;
                util.SQLUpdate(classname,"INSERT INTO Timetable VALUES('"+dayip+"','"+session+"','"+startip+"','"+endip+"','"+nameip+"')");
		if(util.tableExists(classname,util.getDate()) && endip.compareTo(util.sysTime())>0) {
			String[] namelist=util.SQLQuery(classname,"SELECT IDNo FROM Namelist");
			for(int i=0;i<namelist.length;i++)
				util.SQLUpdate(classname,"INSERT INTO "+util.getDate()+" VALUES('"+namelist[i]+"','"+session+"'");
		}

                notifier.setForeground(new java.awt.Color(0, 0, 255));
                notifier.setText("Successfully added session '"+nameip+"'");
            }

            else
            {
                notifier.setForeground(new java.awt.Color(255, 0, 0));
                notifier.setText("Session timings clash with previous session");
            }
        }
        
        leftdaychooser.setModel(new javax.swing.DefaultComboBoxModel(util.SQLQuery(classname,"SELECT DISTINCT Day FROM Timetable")));
        sessionchooser.setModel(new javax.swing.DefaultComboBoxModel(util.SQLQuery(classname,"SELECT SessionName FROM Timetable WHERE Day='"+leftdaychooser.getSelectedItem().toString()+"'")));
    }//GEN-LAST:event_addbuttonActionPerformed

    private void backbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbuttonActionPerformed
        setVisible(false);
        dispose();
        editClass.main(null);
    }//GEN-LAST:event_backbuttonActionPerformed

    private void deletebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletebuttonActionPerformed
        int currentsession=sessionchooser.getSelectedIndex()+1;
	int totalsessions=sessionchooser.getItemCount();
        String dayip=leftdaychooser.getSelectedItem().toString();
        String nameip=sessionchooser.getSelectedItem().toString();

        util.SQLUpdate(classname,"DELETE FROM Timetable WHERE Day='"+dayip+"' AND Session="+currentsession);
	for(int i=currentsession;i<totalsessions;i++) {
		if(util.tableExists(util.getDate()))
			util.SQLUpdate(classname,"UPDATE "+util.getDate()+" SET Session="+i+" WHERE Session="+(i+1));
		util.SQLUpdate(classname,"UPDATE Timetable SET Session="+i+" WHERE Day='"+dayip+"' AND Session="+(i+1));
	}
        //*********************************************util.SQLUpdate(classname,"DELETE FROM Percentage WHERE SessionName='"+nameip+"'");
	sessionchooser.setSelectedIndex(currentsession-2);
        leftdaychooser.setModel(new javax.swing.DefaultComboBoxModel(util.SQLQuery(classname,"SELECT DISTINCT Day FROM Timetable")));
        sessionchooser.setModel(new javax.swing.DefaultComboBoxModel(util.SQLQuery(classname,"SELECT SessionName FROM Timetable WHERE Day='"+leftdaychooser.getSelectedItem().toString()+"'")));
        notifier.setForeground(new java.awt.Color(255, 145, 0));
        notifier.setText("Successfully deleted session '"+nameip+"'");
    }//GEN-LAST:event_deletebuttonActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String classname) {
		/* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			javax.swing.UIManager.setLookAndFeel("com.sun.java.swing.plaf.gtk.GTKLookAndFeel");
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(editTimetable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(editTimetable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(editTimetable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(editTimetable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
        //</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new editTimetable(classname).setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addbutton;
    private javax.swing.JButton applybutton;
    private javax.swing.JButton backbutton;
    private javax.swing.JButton deletebutton;
    private javax.swing.JComboBox leftdaychooser;
    private javax.swing.JLabel leftdaylabel;
    private javax.swing.JComboBox leftendhourchooser;
    private javax.swing.JLabel leftendlabel;
    private javax.swing.JComboBox leftendminutechooser;
    private javax.swing.JLabel leftendseparator;
    private javax.swing.JTextField leftsessionname;
    private javax.swing.JLabel leftsessionnamelabel;
    private javax.swing.JComboBox leftstarthourchooser;
    private javax.swing.JLabel leftstartlabel;
    private javax.swing.JComboBox leftstartminutechooser;
    private javax.swing.JLabel leftstartseparator;
    private javax.swing.JLabel notifier;
    private javax.swing.JLabel orlabel;
    private javax.swing.JComboBox rightdaychooser;
    private javax.swing.JLabel rightdaylabel;
    private javax.swing.JComboBox rightendhourchooser;
    private javax.swing.JLabel rightendlabel;
    private javax.swing.JComboBox rightendminutechooser;
    private javax.swing.JLabel rightendseparator;
    private javax.swing.JTextField rightsessionname;
    private javax.swing.JLabel rightsessionnamelabel;
    private javax.swing.JComboBox rightstarthourchooser;
    private javax.swing.JLabel rightstartlabel;
    private javax.swing.JComboBox rightstartminutechooser;
    private javax.swing.JLabel rightstartseparator;
    private javax.swing.JLabel righttitle;
    private javax.swing.JComboBox sessionchooser;
    private javax.swing.JLabel sessionlabel;
    private javax.swing.JLabel title;
    private String classname;
    // End of variables declaration//GEN-END:variables
}
